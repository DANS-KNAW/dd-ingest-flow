#!/usr/bin/env python3

import argparse
import os

import requests
from builtins import all
import stat

service_baseurl = 'http://localhost:20300'

file_writeable_to_group = lambda f: os.stat(f).st_mode & stat.S_IWGRP > 0

def start_import(path, continue_previous, is_migration):
    if not has_dirtree_pred(path, file_writeable_to_group):
        chmod_command = "chmod -R g+w %s" % path
        print("Some files in the import batch do not give the owner group write permissions. Executing '%s' to fix it" % chmod_command)
        status = os.system(chmod_command)
        if status != 0:
            print("Could not give owner group write permissions. Possibly your account is not the owner user of the files.")
            return
    print("Sending start import request to server...")
    r = requests.post('%s/%s/:start' % (service_baseurl, "migrations" if is_migration else "imports"), json={
        'batch': os.path.abspath(path),
        'continue': continue_previous
    })
    print('Server responded: %s' % r.text)

#
# Helper functions
#
def has_file_pred(file, pred):
    return pred(file)

def has_dirtree_pred(dir, pred):
    for root, dirs, files in os.walk(dir):
        return pred(root) \
               and all(pred(os.path.join(root, dir)) for dir in dirs) \
               and all(pred(os.path.join(root, file)) for file in files)

def list_events(params):
    r = requests.get('%s/events' % service_baseurl, headers={'Accept': 'text/csv'}, params=params)
    r.encoding = r.apparent_encoding
    print(r.text)

parser = argparse.ArgumentParser(add_help=True)
subparsers = parser.add_subparsers(dest='command')
parser_import = subparsers.add_parser('start-import',
                                      help='start import of a batch of deposits')
parser_import.add_argument('batch',
                           metavar='<batch-directory>',
                           help='path to batch of deposits to import; the directory must be located inside the import area')
parser_import.add_argument('-c', '--continue',
                           action='store_true',
                           dest='continue_previous',
                           help='continue previously stopped batch (i.e. allow output directory to be non-empty)')

parser_migration = subparsers.add_parser('start-migration',
                                      help='start migration of a batch of deposits')
parser_migration.add_argument('batch',
                           metavar='<batch-directory>',
                           help='path to batch of deposits to migration; the directory must be located inside the migration area')
parser_migration.add_argument('-c', '--continue',
                           action='store_true',
                           dest='continue_previous',
                           help='continue previously stopped batch (i.e. allow output directory to be non-empty)')


parser_events = subparsers.add_parser('list-events',
                                      help='print events per deposit')
parser_events.add_argument('-s', '--source',
                           dest='source',
                           metavar='<source>',
                           help='only events for this source (i.e. batch or auto-ingest)')
parser_events.add_argument('-d', '--deposit',
                           metavar='<uuid>',
                           dest='deposit_id',
                           help='only events for this deposit')

parser_status = subparsers.add_parser('get-status',
                                      help='print last event per deposit')
parser_status.add_argument('-b', '--batch',
                           dest='batch',
                           metavar='<batch>',
                           help='only status of this batch')
parser_status.add_argument('-d', '--deposit',
                           metavar='<uuid>',
                           dest='deposit_id',
                           help='only status of this deposit')

args = parser.parse_args()

if args.command == 'start-migration':
    start_import(args.batch, args.continue_previous, True)
if args.command == 'start-import':
    start_import(args.batch, args.continue_previous, False)
elif args.command == 'list-events':
    params = {}
    if args.source is not None:
        params['source'] = args.source
    if args.deposit_id is not None:
        params['depositId'] = args.deposit_id
    list_events(params)